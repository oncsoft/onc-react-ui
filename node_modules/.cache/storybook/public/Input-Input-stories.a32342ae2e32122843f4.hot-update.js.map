{"version":3,"file":"Input-Input-stories.a32342ae2e32122843f4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAjEA;AAYA;AAAA;AAusources":["webpack://onc-react-ui/./src/components/Input/Input.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styleModules from './Input.module.css';\nimport { useTheme } from '../../utils/theme';\n\nconst Input = ({\n  label,\n  value,\n  onChange,\n  inputSize,\n  error,\n  type,\n  disabled,\n  style = {},\n  bordered,\n  rounded,\n}) => {\n  const theme = useTheme();\n  const styles = {\n    ...style,\n  };\n\n  const errorStatus = value.length > inputSize || error;\n\n  const styleVariables = {\n    '--primaryColor': errorStatus\n      ? theme.errorColor ?? 'red'\n      : theme.primaryColor,\n    '--shadowColor': theme.shadowColor,\n  };\n\n  const bottomBorderUnset =\n    rounded || bordered\n      ? {\n          borderBottom: 0,\n        }\n      : {};\n\n  const sizeControl = inputSize - (value?.length ?? 0);\n\n  return (\n    <>\n      <div\n        className={`${styleModules.inputContainer}`}\n        style={{ ...styleVariables, ...bottomBorderUnset }}\n      >\n        <div className={styleModules.inputLabel}>{label}</div>\n        <input\n          className={`${styleModules.input} ${\n            bordered ? styleModules.bordered : ''\n          } ${rounded ? styleModules.rounded : ''}`}\n          style={{ ...styles, ...styleVariables }}\n          type={type}\n          value={value}\n          onChange={onChange}\n          disabled={disabled}\n        />\n        {inputSize && sizeControl >= 0 && (\n          <div className={styleModules.sizeLabel} style={styleVariables}>\n            {sizeControl}\n          </div>\n        )}\n        {errorStatus && (\n          <div className={styleModules.errorMessage} style={styleVariables}>\n            {error ?? 'Maksimum değeri geçtiniz.'}\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nInput.defaultProps = {\n  type: 'text',\n};\n\nInput.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  inputSize: PropTypes.number,\n  error: PropTypes.string,\n  type: PropTypes.oneOf('text', 'number'),\n  disabled: PropTypes.bool,\n  style: PropTypes.object,\n  bordered: PropTypes.bool,\n  rounded: PropTypes.bool,\n};\n\nexport default Input;\n"],"names":[],"sourceRoot":""}