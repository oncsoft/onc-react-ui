{"version":3,"file":"Dropdown-Dropdown-stories.91d5d625779e9df5fbae.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AAAA;AAEA;AAHA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAzFA;AAIA;AAAA;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA","sources":["webpack://onc-react-ui/./src/components/Dropdown/Dropdown.js"],"sourcesContent":["import React, { useEffect, useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../Input/Input';\nimport styleModules from './Dropdown.module.css';\nimport { useTheme } from '../../utils/theme';\n\nconst Dropdown = ({ label, onSelect, data = [], value, noShadow }) => {\n  const [innerValue, setInnerValue] = useState(value);\n  const [isSearch, setIsSearch] = useState(false);\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n  const styleVariables = {\n    '--primaryColor': theme.primaryColor,\n    '--shadowColor': noShadow ? '' : theme.shadowColor,\n    '--disabledColor': theme.disabledColor,\n  };\n  const containerRef = useRef();\n  const optionsRef = useRef();\n\n  useEffect(() => {\n    setInnerValue(value);\n  }, [value]);\n\n  const setOpenStatus = (status) => () => {\n    setIsSearch(false);\n    setOpen(status);\n  };\n\n  const onChangeInput = (e) => {\n    setIsSearch(true);\n    setInnerValue(e.target.value);\n  };\n\n  const onSelectOption = (option) => (e) => {\n    e.stopPropagation();\n    console.error(option);\n    onSelect(option);\n    requestAnimationFrame(setOpenStatus(false));\n  };\n\n  const filterData = (data) => {\n    return isSearch\n      ? data.filter((item) => item && item.includes(innerValue))\n      : data;\n  };\n\n  const renderOptions = useMemo(() => {\n    const filteredData = filterData(data ?? []);\n    return (\n      <div\n        className={`${styleModules.datalist} ${\n          open ? styleModules.visible : styleModules.invisible\n        }`}\n        style={styleVariables}\n        tabIndex={0}\n        ref={optionsRef}\n        onBlur={setOpenStatus(false)}\n      >\n        {filteredData.length ? (\n          filteredData.map((item, index) => {\n            return (\n              <div\n                onClick={onSelectOption(item)}\n                className={`${styleModules.option}`}\n                key={item + index}\n                style={styleVariables}\n              >\n                {item}\n              </div>\n            );\n          })\n        ) : (\n          <div className={`${styleModules.option}`} style={styleVariables}>\n            Sonuç Bulunamadı\n          </div>\n        )}\n      </div>\n    );\n  }, [data, open, innerValue]);\n\n  return (\n    <div className={`${styleModules.dropdownContainer}`} ref={containerRef}>\n      <Input\n        label={label}\n        value={innerValue ?? ''}\n        onChange={onChangeInput}\n        noShadow={noShadow}\n        onBlur={() => {\n          optionsRef.current.focus();\n        }}\n        onClick={setOpenStatus(true)}\n      />\n      {renderOptions}\n    </div>\n  );\n};\n\nDropdown.propTypes = {\n  label: PropTypes.string,\n  onSelect: PropTypes.func,\n  data: PropTypes.array,\n  value: PropTypes.string,\n  noShadow: PropTypes.bool,\n};\n\nexport default Dropdown;\n"],"names":[],"sourceRoot":""}