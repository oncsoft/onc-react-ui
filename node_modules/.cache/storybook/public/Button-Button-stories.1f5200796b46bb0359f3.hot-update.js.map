{"version":3,"file":"Button-Button-stories.1f5200796b46bb0359f3.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA","sources":["webpack://onc-react-ui/./node_modules/@storybook/addon-actions/dist/chunk-GOSXJPAJ.mjs","webpack://onc-react-ui/./node_modules/@storybook/addon-actions/dist/index.mjs","webpack://onc-react-ui/./src/utils/defaultTheme.js","webpack://onc-react-ui/./src/utils/theme.js"],"sourcesContent":["import { config, action } from './chunk-AY7I2SME.mjs';\n\nvar actions=(...args)=>{let options=config,names=args;names.length===1&&Array.isArray(names[0])&&([names]=names),names.length!==1&&typeof names[names.length-1]!=\"string\"&&(options={...config,...names.pop()});let namesObject=names[0];(names.length!==1||typeof namesObject==\"string\")&&(namesObject={},names.forEach(name=>{namesObject[name]=name;}));let actionsObject={};return Object.keys(namesObject).forEach(name=>{actionsObject[name]=action(namesObject[name],options);}),actionsObject};\n\nexport { actions };\n","export { actions } from './chunk-GOSXJPAJ.mjs';\nexport { action, config, configureActions } from './chunk-AY7I2SME.mjs';\nexport { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY } from './chunk-VWCVBQ22.mjs';\n","const defaultTheme = {\n  primaryColor: '#6bb8e6',\n  secondaryColor: '#282c34',\n  shadowColor: '#1c1d1d',\n  errorColor: 'red',\n  disabledColor: '#393737',\n};\n\nexport default defaultTheme;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultTheme from './defaultTheme';\n\nconst ThemeContext = React.createContext();\n\nexport const useTheme = () => {\n  return useContext(ThemeContext);\n};\n\nconst ThemeProvider = ({ children, theme }) => {\n  const selectedTheme = theme || defaultTheme;\n  return (\n    <ThemeContext.Provider value={selectedTheme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nThemeProvider.propTypes = {\n  children: PropTypes.object,\n  theme: PropTypes.object,\n};\n\nexport default ThemeProvider;\n"],"names":[],"sourceRoot":""}